{
  "address": "0x52658f5eC6d5F1fdDBCb2d0D7cEfDdC6b68951Ee",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract INounsDescriptor",
          "name": "_descriptor",
          "type": "address"
        },
        {
          "internalType": "contract IENSReverseRecords",
          "name": "_reverseRecords",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint48",
              "name": "background",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "body",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "accessory",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "head",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "glasses",
              "type": "uint48"
            }
          ],
          "indexed": false,
          "internalType": "struct INounsSeeder.Seed",
          "name": "seed",
          "type": "tuple"
        }
      ],
      "name": "NounCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "_reverseName",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addressPreview",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "descriptor",
      "outputs": [
        {
          "internalType": "contract INounsDescriptor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getSeedInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reverseRecords",
      "outputs": [
        {
          "internalType": "contract IENSReverseRecords",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "seeds",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "background",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "body",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "accessory",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "head",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "glasses",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x29fecb47f008b207846bc077d133a57a8b1cbd6c19b41f574080551bdf8c9c9e",
  "receipt": {
    "to": null,
    "from": "0xdaF0577E2dd838efC5B16c0bce303951d48cc74C",
    "contractAddress": "0x52658f5eC6d5F1fdDBCb2d0D7cEfDdC6b68951Ee",
    "transactionIndex": 6,
    "gasUsed": "3699188",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xfa0332e24d9ef1677e5f6bbfc8451692279e622a1ff4c6fc6e2ad4c11c8643c7",
    "transactionHash": "0x29fecb47f008b207846bc077d133a57a8b1cbd6c19b41f574080551bdf8c9c9e",
    "logs": [],
    "blockNumber": 10978621,
    "cumulativeGasUsed": "6992258",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9a9739437d085c53684ac254952015214e275f1e",
    "0x196eC7109e127A353B709a20da25052617295F6f"
  ],
  "numDeployments": 3,
  "solcInputHash": "5d86010343a547b9c409309e8c67bf38",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract INounsDescriptor\",\"name\":\"_descriptor\",\"type\":\"address\"},{\"internalType\":\"contract IENSReverseRecords\",\"name\":\"_reverseRecords\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"background\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"body\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"accessory\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"head\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"glasses\",\"type\":\"uint48\"}],\"indexed\":false,\"internalType\":\"struct INounsSeeder.Seed\",\"name\":\"seed\",\"type\":\"tuple\"}],\"name\":\"NounCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_reverseName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addressPreview\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"descriptor\",\"outputs\":[{\"internalType\":\"contract INounsDescriptor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getSeedInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reverseRecords\",\"outputs\":[{\"internalType\":\"contract IENSReverseRecords\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seeds\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"background\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"body\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"accessory\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"head\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"glasses\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"claim()\":{\"details\":\"Call _mintTo with the to address.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_reverseName(address)\":{\"notice\":\"Mint a Noun with `nounId` to the provided `to` address.\"},\"addressPreview(address)\":{\"notice\":\"Given an address, construct a base64 encoded SVG image.\"},\"claim()\":{\"notice\":\"Mint a Noun to the minter.\"},\"getSeedInput(address)\":{\"notice\":\"Given an address, generate a unique input to be used with the generateSeed function.\"},\"tokenURI(uint256)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given asset.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SyntheticNouns.sol\":\"SyntheticNouns\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/SyntheticNouns.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { INounsDescriptor } from \\\"./interfaces/INounsDescriptor.sol\\\";\\nimport { INounsSeeder } from \\\"./interfaces/INounsSeeder.sol\\\";\\nimport { IENSReverseRecords } from \\\"./interfaces/IENSReverseRecords.sol\\\";\\n\\ncontract SyntheticNouns is ERC721 {\\n    using Strings for uint256;\\n    using Strings for address;\\n\\n    event NounCreated(uint256 indexed tokenId, INounsSeeder.Seed seed);\\n\\n    // The Nouns token URI descriptor\\n    INounsDescriptor public descriptor;\\n\\n    // ENS reverse records contract\\n    IENSReverseRecords public reverseRecords;\\n\\n    // The noun seeds\\n    mapping(uint256 => INounsSeeder.Seed) public seeds;\\n\\n    // Addresses that have claimed a noun\\n    mapping(address => bool) public claimed;\\n\\n    // Claimer of each noun\\n    mapping(uint256 => address) public claimerOf;\\n\\n    // The internal noun ID tracker\\n    uint256 private _currentNounId = 1;\\n\\n    constructor(INounsDescriptor _descriptor, IENSReverseRecords _reverseRecords) ERC721(\\\"Synthetic Nouns\\\", \\\"sNOUN\\\") {\\n        descriptor = _descriptor;\\n        reverseRecords = _reverseRecords;\\n    }\\n\\n    /**\\n     * @notice Generate a pseudo-random Noun seed using the previous blockhash and noun ID.\\n     */\\n    // prettier-ignore\\n    function generateSeed(uint256 _pseudorandomness) private view returns (INounsSeeder.Seed memory) {\\n        \\n        uint256 backgroundCount = descriptor.backgroundCount();\\n        uint256 bodyCount = descriptor.bodyCount();\\n        uint256 accessoryCount = descriptor.accessoryCount();\\n        uint256 headCount = descriptor.headCount();\\n        uint256 glassesCount = descriptor.glassesCount();\\n\\n        return INounsSeeder.Seed({\\n            background: uint48(\\n                uint48(_pseudorandomness) % backgroundCount\\n            ),\\n            body: uint48(\\n                uint48(_pseudorandomness >> 48) % bodyCount\\n            ),\\n            accessory: uint48(\\n                uint48(_pseudorandomness >> 96) % accessoryCount\\n            ),\\n            head: uint48(\\n                uint48(_pseudorandomness >> 144) % headCount\\n            ),\\n            glasses: uint48(\\n                uint48(_pseudorandomness >> 192) % glassesCount\\n            )\\n        });\\n    }\\n\\n    /**\\n     * @notice Given an address, generate a unique input to be used with the generateSeed function.\\n     */\\n    function getSeedInput(address _address) public pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(_address)));\\n    }\\n\\n    /**\\n     * @notice Mint a Noun to the minter.\\n     * @dev Call _mintTo with the to address.\\n     */\\n    function claim() public returns (uint256) {\\n        require(!claimed[msg.sender], \\\"Noun already claimed\\\");\\n        claimed[msg.sender] = true;\\n        uint256 tokenId = _currentNounId++;\\n        claimerOf[tokenId] = msg.sender;\\n        return _mintTo(msg.sender, tokenId);\\n    }\\n\\n    /**\\n     * @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n        require(_exists(_tokenId), \\\"NounsToken: URI query for nonexistent token\\\");\\n        string memory nounId = _tokenId.toString();\\n        string memory name = string(abi.encodePacked(\\\"Synthetic Noun \\\", nounId));\\n\\n        string memory ensName = _reverseName(claimerOf[_tokenId]);\\n        string memory addressOrENS = bytes(ensName).length == 0 ? claimerOf[_tokenId].toHexString() : ensName;\\n        string memory description = string(\\n            abi.encodePacked(\\n                \\\"Synthetic Noun \\\",\\n                nounId,\\n                \\\" claimed by address, \\\",\\n                addressOrENS,\\n                \\\", is a member of the Synthetic Nouns DAO\\\"\\n            )\\n        );\\n\\n        return descriptor.genericDataURI(name, description, seeds[_tokenId]);\\n    }\\n\\n    /**\\n     * @notice Given an address, construct a base64 encoded SVG image.\\n     */\\n    function addressPreview(address _address) public view returns (string memory) {\\n        return descriptor.generateSVGImage(generateSeed(getSeedInput(_address)));\\n    }\\n\\n    /**\\n     * @notice Mint a Noun with `nounId` to the provided `to` address.\\n     */\\n    function _mintTo(address _to, uint256 _nounId) internal returns (uint256) {\\n        INounsSeeder.Seed memory seed = seeds[_nounId] = generateSeed(getSeedInput(_to));\\n\\n        _mint(_to, _nounId);\\n        emit NounCreated(_nounId, seed);\\n\\n        return _nounId;\\n    }\\n\\n    /**\\n     * @notice Mint a Noun with `nounId` to the provided `to` address.\\n     */\\n    function _reverseName(address _address) public view returns (string memory name) {\\n        address[] memory t = new address[](1);\\n        t[0] = _address;\\n        name = reverseRecords.getNames(t)[0];\\n    }\\n}\\n\",\"keccak256\":\"0x4b84d5db95026451d6eaff89bfc415406f214969d164b0d4a62cec2b46c8d601\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IENSReverseRecords.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.6;\\n\\nabstract contract IENSReverseRecords {\\n    function getNames(address[] calldata addresses) external view virtual returns (string[] memory r);\\n}\\n\",\"keccak256\":\"0x246924a3f9ee9048634212061d63adf1a9fbd0f153f874c6fd8bd988650e9e55\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/INounsDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for NounsDescriptor\\n\\n/*********************************\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n *********************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport { INounsSeeder } from './INounsSeeder.sol';\\n\\ninterface INounsDescriptor {\\n    event PartsLocked();\\n\\n    event DataURIToggled(bool enabled);\\n\\n    event BaseURIUpdated(string baseURI);\\n\\n    function arePartsLocked() external returns (bool);\\n\\n    function isDataURIEnabled() external returns (bool);\\n\\n    function baseURI() external returns (string memory);\\n\\n    function palettes(uint8 paletteIndex, uint256 colorIndex) external view returns (string memory);\\n\\n    function backgrounds(uint256 index) external view returns (string memory);\\n\\n    function bodies(uint256 index) external view returns (bytes memory);\\n\\n    function accessories(uint256 index) external view returns (bytes memory);\\n\\n    function heads(uint256 index) external view returns (bytes memory);\\n\\n    function glasses(uint256 index) external view returns (bytes memory);\\n\\n    function backgroundCount() external view returns (uint256);\\n\\n    function bodyCount() external view returns (uint256);\\n\\n    function accessoryCount() external view returns (uint256);\\n\\n    function headCount() external view returns (uint256);\\n\\n    function glassesCount() external view returns (uint256);\\n\\n    function addManyColorsToPalette(uint8 paletteIndex, string[] calldata newColors) external;\\n\\n    function addManyBackgrounds(string[] calldata backgrounds) external;\\n\\n    function addManyBodies(bytes[] calldata bodies) external;\\n\\n    function addManyAccessories(bytes[] calldata accessories) external;\\n\\n    function addManyHeads(bytes[] calldata heads) external;\\n\\n    function addManyGlasses(bytes[] calldata glasses) external;\\n\\n    function addColorToPalette(uint8 paletteIndex, string calldata color) external;\\n\\n    function addBackground(string calldata background) external;\\n\\n    function addBody(bytes calldata body) external;\\n\\n    function addAccessory(bytes calldata accessory) external;\\n\\n    function addHead(bytes calldata head) external;\\n\\n    function addGlasses(bytes calldata glasses) external;\\n\\n    function lockParts() external;\\n\\n    function toggleDataURIEnabled() external;\\n\\n    function setBaseURI(string calldata baseURI) external;\\n\\n    function tokenURI(uint256 tokenId, INounsSeeder.Seed memory seed) external view returns (string memory);\\n\\n    function dataURI(uint256 tokenId, INounsSeeder.Seed memory seed) external view returns (string memory);\\n\\n    function genericDataURI(\\n        string calldata name,\\n        string calldata description,\\n        INounsSeeder.Seed memory seed\\n    ) external view returns (string memory);\\n\\n    function generateSVGImage(INounsSeeder.Seed memory seed) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x87bac5321fd5d5cc8c7b4e83cebb68b28ec8ccea25890441f24f21e5349798ef\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/INounsSeeder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for NounsSeeder\\n\\n/*********************************\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\n *********************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport { INounsDescriptor } from './INounsDescriptor.sol';\\n\\ninterface INounsSeeder {\\n    struct Seed {\\n        uint48 background;\\n        uint48 body;\\n        uint48 accessory;\\n        uint48 head;\\n        uint48 glasses;\\n    }\\n\\n    function generateSeed(uint256 nounId, INounsDescriptor descriptor) external view returns (Seed memory);\\n}\\n\",\"keccak256\":\"0x1d4912076a8f3c7f01eefe415161590c32efe1a32eb1211a09da6808191c23db\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040526001600b553480156200001657600080fd5b50604051620043843803806200438483398181016040528101906200003c919062000244565b6040518060400160405280600f81526020017f53796e746865746963204e6f756e7300000000000000000000000000000000008152506040518060400160405280600581526020017f734e4f554e0000000000000000000000000000000000000000000000000000008152508160009080519060200190620000c092919062000166565b508060019080519060200190620000d992919062000166565b50505081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000385565b8280546200017490620002e7565b90600052602060002090601f016020900481019282620001985760008555620001e4565b82601f10620001b357805160ff1916838001178555620001e4565b82800160010185558215620001e4579182015b82811115620001e3578251825591602001919060010190620001c6565b5b509050620001f39190620001f7565b5090565b5b8082111562000212576000816000905550600101620001f8565b5090565b600081519050620002278162000351565b92915050565b6000815190506200023e816200036b565b92915050565b600080604083850312156200025e576200025d6200034c565b5b60006200026e858286016200022d565b9250506020620002818582860162000216565b9150509250929050565b60006200029882620002c7565b9050919050565b6000620002ac826200028b565b9050919050565b6000620002c0826200028b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060028204905060018216806200030057607f821691505b602082108114156200031757620003166200031d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6200035c816200029f565b81146200036857600080fd5b50565b6200037681620002b3565b81146200038257600080fd5b50565b613fef80620003956000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80634e71d92d116100b8578063b88d4fde1161007c578063b88d4fde1461039d578063c87b56dd146103b9578063c884ef83146103e9578063e9300f0414610419578063e985e9c514610449578063f0503e801461047957610142565b80634e71d92d146102e55780636352211e1461030357806370a082311461033357806395d89b4114610363578063a22cb4651461038157610142565b806323b872dd1161010a57806323b872dd146102115780632eb7452c1461022d578063303e74df1461025d5780633991edb81461027b57806342842e0e1461029957806345731471146102b557610142565b806301ffc9a71461014757806306fdde0314610177578063081812fc14610195578063095ea7b3146101c55780631ee304a0146101e1575b600080fd5b610161600480360381019061015c9190612ae7565b6104ad565b60405161016e91906131d7565b60405180910390f35b61017f61058f565b60405161018c9190613228565b60405180910390f35b6101af60048036038101906101aa9190612b8a565b610621565b6040516101bc919061314e565b60405180910390f35b6101df60048036038101906101da9190612a5e565b610667565b005b6101fb60048036038101906101f69190612b8a565b61077f565b604051610208919061314e565b60405180910390f35b61022b60048036038101906102269190612948565b6107b2565b005b610247600480360381019061024291906128db565b610812565b6040516102549190613228565b60405180910390f35b6102656108db565b604051610272919061320d565b60405180910390f35b610283610901565b60405161029091906131f2565b60405180910390f35b6102b360048036038101906102ae9190612948565b610927565b005b6102cf60048036038101906102ca91906128db565b610947565b6040516102dc9190613228565b60405180910390f35b6102ed610ab9565b6040516102fa919061346a565b60405180910390f35b61031d60048036038101906103189190612b8a565b610c1d565b60405161032a919061314e565b60405180910390f35b61034d600480360381019061034891906128db565b610ccf565b60405161035a919061346a565b60405180910390f35b61036b610d87565b6040516103789190613228565b60405180910390f35b61039b60048036038101906103969190612a1e565b610e19565b005b6103b760048036038101906103b2919061299b565b610e2f565b005b6103d360048036038101906103ce9190612b8a565b610e91565b6040516103e09190613228565b60405180910390f35b61040360048036038101906103fe91906128db565b6110a9565b60405161041091906131d7565b60405180910390f35b610433600480360381019061042e91906128db565b6110c9565b604051610440919061346a565b60405180910390f35b610463600480360381019061045e9190612908565b6110fc565b60405161047091906131d7565b60405180910390f35b610493600480360381019061048e9190612b8a565b611190565b6040516104a4959493929190613485565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061057857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610588575061058782611220565b5b9050919050565b60606000805461059e90613868565b80601f01602080910402602001604051908101604052809291908181526020018280546105ca90613868565b80156106175780601f106105ec57610100808354040283529160200191610617565b820191906000526020600020905b8154815290600101906020018083116105fa57829003601f168201915b5050505050905090565b600061062c8261128a565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061067282610c1d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106da9061340f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166107026112d5565b73ffffffffffffffffffffffffffffffffffffffff16148061073157506107308161072b6112d5565b6110fc565b5b610770576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610767906133af565b60405180910390fd5b61077a83836112dd565b505050565b600a6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6107c36107bd6112d5565b82611396565b610802576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f99061342f565b60405180910390fd5b61080d83838361142b565b505050565b6060600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632ea0430061086361085e856110c9565b611692565b6040518263ffffffff1660e01b815260040161087f919061344f565b60006040518083038186803b15801561089757600080fd5b505afa1580156108ab573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108d49190612b41565b9050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61094283838360405180602001604052806000815250610e2f565b505050565b60606000600167ffffffffffffffff81111561096657610965613aa7565b5b6040519080825280602002602001820160405280156109945781602001602082028036833780820191505090505b50905082816000815181106109ac576109ab613a78565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cbf8b66c826040518263ffffffff1660e01b8152600401610a4191906131b5565b60006040518083038186803b158015610a5957600080fd5b505afa158015610a6d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a969190612a9e565b600081518110610aa957610aa8613a78565b5b6020026020010151915050919050565b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610b48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3f9061336f565b60405180910390fd5b6001600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600b6000815480929190610bb59061394d565b91905055905033600a600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610c173382611a98565b91505090565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610cc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbd906133ef565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d379061334f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610d9690613868565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc290613868565b8015610e0f5780601f10610de457610100808354040283529160200191610e0f565b820191906000526020600020905b815481529060010190602001808311610df257829003601f168201915b5050505050905090565b610e2b610e246112d5565b8383611ccd565b5050565b610e40610e3a6112d5565b83611396565b610e7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e769061342f565b60405180910390fd5b610e8b84848484611e3a565b50505050565b6060610e9c82611e96565b610edb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed29061338f565b60405180910390fd5b6000610ee683611f02565b9050600081604051602001610efb91906130e7565b60405160208183030381529060405290506000610f4a600a600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610947565b9050600080825114610f5c5781610faf565b610fae600a600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612063565b5b905060008482604051602001610fc6929190613109565b6040516020818303038152906040529050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166387db11bd8583600860008c81526020019081526020016000206040518463ffffffff1660e01b81526004016110489392919061324a565b60006040518083038186803b15801561106057600080fd5b505afa158015611074573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061109d9190612b41565b95505050505050919050565b60096020528060005260406000206000915054906101000a900460ff1681565b6000816040516020016110dc91906130cc565b6040516020818303038152906040528051906020012060001c9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60086020528060005260406000206000915090508060000160009054906101000a900465ffffffffffff16908060000160069054906101000a900465ffffffffffff169080600001600c9054906101000a900465ffffffffffff16908060000160129054906101000a900465ffffffffffff16908060000160189054906101000a900465ffffffffffff16905085565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61129381611e96565b6112d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c9906133ef565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661135083610c1d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806113a283610c1d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806113e457506113e381856110fc565b5b8061142257508373ffffffffffffffffffffffffffffffffffffffff1661140a84610621565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661144b82610c1d565b73ffffffffffffffffffffffffffffffffffffffff16146114a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611498906132cf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611511576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115089061330f565b60405180910390fd5b61151c838383612090565b6115276000826112dd565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461157791906136e8565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115ce9190613607565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461168d838383612095565b505050565b61169a61266a565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634531c0a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561170457600080fd5b505afa158015611718573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173c9190612bb7565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eba818066040518163ffffffff1660e01b815260040160206040518083038186803b1580156117a857600080fd5b505afa1580156117bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e09190612bb7565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634daebac26040518163ffffffff1660e01b815260040160206040518083038186803b15801561184c57600080fd5b505afa158015611860573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118849190612bb7565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cc2aa0916040518163ffffffff1660e01b815260040160206040518083038186803b1580156118f057600080fd5b505afa158015611904573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119289190612bb7565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634479cef26040518163ffffffff1660e01b815260040160206040518083038186803b15801561199457600080fd5b505afa1580156119a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cc9190612bb7565b90506040518060a00160405280868965ffffffffffff166119ed91906139ba565b65ffffffffffff1681526020018560308a901c65ffffffffffff16611a1291906139ba565b65ffffffffffff1681526020018460608a901c65ffffffffffff16611a3791906139ba565b65ffffffffffff1681526020018360908a901c65ffffffffffff16611a5c91906139ba565b65ffffffffffff1681526020018260c08a901c65ffffffffffff16611a8191906139ba565b65ffffffffffff1681525095505050505050919050565b600080611aac611aa7856110c9565b611692565b6008600085815260200190815260200160002060008201518160000160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060208201518160000160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160126101000a81548165ffffffffffff021916908365ffffffffffff16021790555060808201518160000160186101000a81548165ffffffffffff021916908365ffffffffffff16021790555090506040518060a00160405290816000820160009054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681526020016000820160069054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160008201600c9054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681526020016000820160129054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681526020016000820160189054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815250509050611c8b848461209a565b827f1106ee9d020bfbb5ee34cf5535a5fbf024a011bd130078088cbf124ab309247882604051611cbb919061344f565b60405180910390a28291505092915050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611d3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d339061332f565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611e2d91906131d7565b60405180910390a3505050565b611e4584848461142b565b611e5184848484612274565b611e90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e87906132af565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60606000821415611f4a576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061205e565b600082905060005b60008214611f7c578080611f659061394d565b915050600a82611f75919061365d565b9150611f52565b60008167ffffffffffffffff811115611f9857611f97613aa7565b5b6040519080825280601f01601f191660200182016040528015611fca5781602001600182028036833780820191505090505b5090505b6000851461205757600182611fe391906136e8565b9150600a85611ff291906139ba565b6030611ffe9190613607565b60f81b81838151811061201457612013613a78565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612050919061365d565b9450611fce565b8093505050505b919050565b60606120898273ffffffffffffffffffffffffffffffffffffffff16601460ff1661240b565b9050919050565b505050565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561210a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612101906133cf565b60405180910390fd5b61211381611e96565b15612153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214a906132ef565b60405180910390fd5b61215f60008383612090565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121af9190613607565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461227060008383612095565b5050565b60006122958473ffffffffffffffffffffffffffffffffffffffff16612647565b156123fe578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026122be6112d5565b8786866040518563ffffffff1660e01b81526004016122e09493929190613169565b602060405180830381600087803b1580156122fa57600080fd5b505af192505050801561232b57506040513d601f19601f820116820180604052508101906123289190612b14565b60015b6123ae573d806000811461235b576040519150601f19603f3d011682016040523d82523d6000602084013e612360565b606091505b506000815114156123a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239d906132af565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612403565b600190505b949350505050565b60606000600283600261241e919061368e565b6124289190613607565b67ffffffffffffffff81111561244157612440613aa7565b5b6040519080825280601f01601f1916602001820160405280156124735781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106124ab576124aa613a78565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061250f5761250e613a78565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261254f919061368e565b6125599190613607565b90505b60018111156125f9577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061259b5761259a613a78565b5b1a60f81b8282815181106125b2576125b1613a78565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806125f29061383e565b905061255c565b506000841461263d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126349061328f565b60405180910390fd5b8091505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6040518060a00160405280600065ffffffffffff168152602001600065ffffffffffff168152602001600065ffffffffffff168152602001600065ffffffffffff168152602001600065ffffffffffff1681525090565b60006126d46126cf846134fd565b6134d8565b905080838252602082019050828560208602820111156126f7576126f6613adb565b5b60005b8581101561274557815167ffffffffffffffff81111561271d5761271c613ad6565b5b80860161272a8982612883565b855260208501945060208401935050506001810190506126fa565b5050509392505050565b600061276261275d84613529565b6134d8565b90508281526020810184848401111561277e5761277d613ae0565b5b6127898482856137fc565b509392505050565b60006127a461279f8461355a565b6134d8565b9050828152602081018484840111156127c0576127bf613ae0565b5b6127cb84828561380b565b509392505050565b6000813590506127e281613f5d565b92915050565b600082601f8301126127fd576127fc613ad6565b5b815161280d8482602086016126c1565b91505092915050565b60008135905061282581613f74565b92915050565b60008135905061283a81613f8b565b92915050565b60008151905061284f81613f8b565b92915050565b600082601f83011261286a57612869613ad6565b5b813561287a84826020860161274f565b91505092915050565b600082601f83011261289857612897613ad6565b5b81516128a8848260208601612791565b91505092915050565b6000813590506128c081613fa2565b92915050565b6000815190506128d581613fa2565b92915050565b6000602082840312156128f1576128f0613aea565b5b60006128ff848285016127d3565b91505092915050565b6000806040838503121561291f5761291e613aea565b5b600061292d858286016127d3565b925050602061293e858286016127d3565b9150509250929050565b60008060006060848603121561296157612960613aea565b5b600061296f868287016127d3565b9350506020612980868287016127d3565b9250506040612991868287016128b1565b9150509250925092565b600080600080608085870312156129b5576129b4613aea565b5b60006129c3878288016127d3565b94505060206129d4878288016127d3565b93505060406129e5878288016128b1565b925050606085013567ffffffffffffffff811115612a0657612a05613ae5565b5b612a1287828801612855565b91505092959194509250565b60008060408385031215612a3557612a34613aea565b5b6000612a43858286016127d3565b9250506020612a5485828601612816565b9150509250929050565b60008060408385031215612a7557612a74613aea565b5b6000612a83858286016127d3565b9250506020612a94858286016128b1565b9150509250929050565b600060208284031215612ab457612ab3613aea565b5b600082015167ffffffffffffffff811115612ad257612ad1613ae5565b5b612ade848285016127e8565b91505092915050565b600060208284031215612afd57612afc613aea565b5b6000612b0b8482850161282b565b91505092915050565b600060208284031215612b2a57612b29613aea565b5b6000612b3884828501612840565b91505092915050565b600060208284031215612b5757612b56613aea565b5b600082015167ffffffffffffffff811115612b7557612b74613ae5565b5b612b8184828501612883565b91505092915050565b600060208284031215612ba057612b9f613aea565b5b6000612bae848285016128b1565b91505092915050565b600060208284031215612bcd57612bcc613aea565b5b6000612bdb848285016128c6565b91505092915050565b6000612bf08383612bfc565b60208301905092915050565b612c058161372e565b82525050565b612c148161372e565b82525050565b612c2b612c268261372e565b613996565b82525050565b6000612c3c8261359b565b612c4681856135c9565b9350612c518361358b565b8060005b83811015612c82578151612c698882612be4565b9750612c74836135bc565b925050600181019050612c55565b5085935050505092915050565b612c9881613740565b82525050565b6000612ca9826135a6565b612cb381856135da565b9350612cc381856020860161380b565b612ccc81613aef565b840191505092915050565b612ce0816137b4565b82525050565b612cef816137d8565b82525050565b6000612d00826135b1565b612d0a81856135eb565b9350612d1a81856020860161380b565b612d2381613aef565b840191505092915050565b6000612d39826135b1565b612d4381856135fc565b9350612d5381856020860161380b565b80840191505092915050565b6000612d6c6020836135eb565b9150612d7782613b4e565b602082019050919050565b6000612d8f6032836135eb565b9150612d9a82613b77565b604082019050919050565b6000612db26025836135eb565b9150612dbd82613bc6565b604082019050919050565b6000612dd5601c836135eb565b9150612de082613c15565b602082019050919050565b6000612df86024836135eb565b9150612e0382613c3e565b604082019050919050565b6000612e1b6019836135eb565b9150612e2682613c8d565b602082019050919050565b6000612e3e6029836135eb565b9150612e4982613cb6565b604082019050919050565b6000612e616014836135eb565b9150612e6c82613d05565b602082019050919050565b6000612e84602b836135eb565b9150612e8f82613d2e565b604082019050919050565b6000612ea7603e836135eb565b9150612eb282613d7d565b604082019050919050565b6000612eca6020836135eb565b9150612ed582613dcc565b602082019050919050565b6000612eed600f836135fc565b9150612ef882613df5565b600f82019050919050565b6000612f106018836135eb565b9150612f1b82613e1e565b602082019050919050565b6000612f336021836135eb565b9150612f3e82613e47565b604082019050919050565b6000612f566015836135fc565b9150612f6182613e96565b601582019050919050565b6000612f79602e836135eb565b9150612f8482613ebf565b604082019050919050565b6000612f9c6028836135fc565b9150612fa782613f0e565b602882019050919050565b60a082016000820151612fc860008501826130ae565b506020820151612fdb60208501826130ae565b506040820151612fee60408501826130ae565b50606082015161300160608501826130ae565b50608082015161301460808501826130ae565b50505050565b60a08201600080830154905061302f8161389a565b61303c60008601826130ae565b5061304681613902565b61305360208601826130ae565b5061305d816138b4565b61306a60408601826130ae565b50613074816138ce565b61308160608601826130ae565b5061308b816138e8565b61309860808601826130ae565b5050505050565b6130a881613798565b82525050565b6130b7816137a2565b82525050565b6130c6816137a2565b82525050565b60006130d88284612c1a565b60148201915081905092915050565b60006130f282612ee0565b91506130fe8284612d2e565b915081905092915050565b600061311482612ee0565b91506131208285612d2e565b915061312b82612f49565b91506131378284612d2e565b915061314282612f8f565b91508190509392505050565b60006020820190506131636000830184612c0b565b92915050565b600060808201905061317e6000830187612c0b565b61318b6020830186612c0b565b613198604083018561309f565b81810360608301526131aa8184612c9e565b905095945050505050565b600060208201905081810360008301526131cf8184612c31565b905092915050565b60006020820190506131ec6000830184612c8f565b92915050565b60006020820190506132076000830184612cd7565b92915050565b60006020820190506132226000830184612ce6565b92915050565b600060208201905081810360008301526132428184612cf5565b905092915050565b600060e08201905081810360008301526132648186612cf5565b905081810360208301526132788185612cf5565b9050613287604083018461301a565b949350505050565b600060208201905081810360008301526132a881612d5f565b9050919050565b600060208201905081810360008301526132c881612d82565b9050919050565b600060208201905081810360008301526132e881612da5565b9050919050565b6000602082019050818103600083015261330881612dc8565b9050919050565b6000602082019050818103600083015261332881612deb565b9050919050565b6000602082019050818103600083015261334881612e0e565b9050919050565b6000602082019050818103600083015261336881612e31565b9050919050565b6000602082019050818103600083015261338881612e54565b9050919050565b600060208201905081810360008301526133a881612e77565b9050919050565b600060208201905081810360008301526133c881612e9a565b9050919050565b600060208201905081810360008301526133e881612ebd565b9050919050565b6000602082019050818103600083015261340881612f03565b9050919050565b6000602082019050818103600083015261342881612f26565b9050919050565b6000602082019050818103600083015261344881612f6c565b9050919050565b600060a0820190506134646000830184612fb2565b92915050565b600060208201905061347f600083018461309f565b92915050565b600060a08201905061349a60008301886130bd565b6134a760208301876130bd565b6134b460408301866130bd565b6134c160608301856130bd565b6134ce60808301846130bd565b9695505050505050565b60006134e26134f3565b90506134ee828261391c565b919050565b6000604051905090565b600067ffffffffffffffff82111561351857613517613aa7565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561354457613543613aa7565b5b61354d82613aef565b9050602081019050919050565b600067ffffffffffffffff82111561357557613574613aa7565b5b61357e82613aef565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061361282613798565b915061361d83613798565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613652576136516139eb565b5b828201905092915050565b600061366882613798565b915061367383613798565b92508261368357613682613a1a565b5b828204905092915050565b600061369982613798565b91506136a483613798565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156136dd576136dc6139eb565b5b828202905092915050565b60006136f382613798565b91506136fe83613798565b925082821015613711576137106139eb565b5b828203905092915050565b600065ffffffffffff82169050919050565b600061373982613778565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600065ffffffffffff82169050919050565b60006137bf826137c6565b9050919050565b60006137d182613778565b9050919050565b60006137e3826137ea565b9050919050565b60006137f582613778565b9050919050565b82818337600083830152505050565b60005b8381101561382957808201518184015260208101905061380e565b83811115613838576000848401525b50505050565b600061384982613798565b9150600082141561385d5761385c6139eb565b5b600182039050919050565b6000600282049050600182168061388057607f821691505b6020821081141561389457613893613a49565b5b50919050565b60006138ad6138a883613b0d565b61371c565b9050919050565b60006138c76138c283613b41565b61371c565b9050919050565b60006138e16138dc83613b1a565b61371c565b9050919050565b60006138fb6138f683613b27565b61371c565b9050919050565b600061391561391083613b34565b61371c565b9050919050565b61392582613aef565b810181811067ffffffffffffffff8211171561394457613943613aa7565b5b80604052505050565b600061395882613798565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561398b5761398a6139eb565b5b600182019050919050565b60006139a1826139a8565b9050919050565b60006139b382613b00565b9050919050565b60006139c582613798565b91506139d083613798565b9250826139e0576139df613a1a565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b60008160001c9050919050565b60008160901c9050919050565b60008160c01c9050919050565b60008160301c9050919050565b60008160601c9050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4e6f756e20616c726561647920636c61696d6564000000000000000000000000600082015250565b7f4e6f756e73546f6b656e3a2055524920717565727920666f72206e6f6e65786960008201527f7374656e7420746f6b656e000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f53796e746865746963204e6f756e200000000000000000000000000000000000600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f20636c61696d656420627920616464726573732c200000000000000000000000600082015250565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b7f2c2069732061206d656d626572206f66207468652053796e746865746963204e60008201527f6f756e732044414f000000000000000000000000000000000000000000000000602082015250565b613f668161372e565b8114613f7157600080fd5b50565b613f7d81613740565b8114613f8857600080fd5b50565b613f948161374c565b8114613f9f57600080fd5b50565b613fab81613798565b8114613fb657600080fd5b5056fea2646970667358221220e66bae4e5271e488a525229ce18806f69cecc1ddaac71cee04b94a6fa09230a264736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c80634e71d92d116100b8578063b88d4fde1161007c578063b88d4fde1461039d578063c87b56dd146103b9578063c884ef83146103e9578063e9300f0414610419578063e985e9c514610449578063f0503e801461047957610142565b80634e71d92d146102e55780636352211e1461030357806370a082311461033357806395d89b4114610363578063a22cb4651461038157610142565b806323b872dd1161010a57806323b872dd146102115780632eb7452c1461022d578063303e74df1461025d5780633991edb81461027b57806342842e0e1461029957806345731471146102b557610142565b806301ffc9a71461014757806306fdde0314610177578063081812fc14610195578063095ea7b3146101c55780631ee304a0146101e1575b600080fd5b610161600480360381019061015c9190612ae7565b6104ad565b60405161016e91906131d7565b60405180910390f35b61017f61058f565b60405161018c9190613228565b60405180910390f35b6101af60048036038101906101aa9190612b8a565b610621565b6040516101bc919061314e565b60405180910390f35b6101df60048036038101906101da9190612a5e565b610667565b005b6101fb60048036038101906101f69190612b8a565b61077f565b604051610208919061314e565b60405180910390f35b61022b60048036038101906102269190612948565b6107b2565b005b610247600480360381019061024291906128db565b610812565b6040516102549190613228565b60405180910390f35b6102656108db565b604051610272919061320d565b60405180910390f35b610283610901565b60405161029091906131f2565b60405180910390f35b6102b360048036038101906102ae9190612948565b610927565b005b6102cf60048036038101906102ca91906128db565b610947565b6040516102dc9190613228565b60405180910390f35b6102ed610ab9565b6040516102fa919061346a565b60405180910390f35b61031d60048036038101906103189190612b8a565b610c1d565b60405161032a919061314e565b60405180910390f35b61034d600480360381019061034891906128db565b610ccf565b60405161035a919061346a565b60405180910390f35b61036b610d87565b6040516103789190613228565b60405180910390f35b61039b60048036038101906103969190612a1e565b610e19565b005b6103b760048036038101906103b2919061299b565b610e2f565b005b6103d360048036038101906103ce9190612b8a565b610e91565b6040516103e09190613228565b60405180910390f35b61040360048036038101906103fe91906128db565b6110a9565b60405161041091906131d7565b60405180910390f35b610433600480360381019061042e91906128db565b6110c9565b604051610440919061346a565b60405180910390f35b610463600480360381019061045e9190612908565b6110fc565b60405161047091906131d7565b60405180910390f35b610493600480360381019061048e9190612b8a565b611190565b6040516104a4959493929190613485565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061057857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610588575061058782611220565b5b9050919050565b60606000805461059e90613868565b80601f01602080910402602001604051908101604052809291908181526020018280546105ca90613868565b80156106175780601f106105ec57610100808354040283529160200191610617565b820191906000526020600020905b8154815290600101906020018083116105fa57829003601f168201915b5050505050905090565b600061062c8261128a565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061067282610c1d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106da9061340f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166107026112d5565b73ffffffffffffffffffffffffffffffffffffffff16148061073157506107308161072b6112d5565b6110fc565b5b610770576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610767906133af565b60405180910390fd5b61077a83836112dd565b505050565b600a6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6107c36107bd6112d5565b82611396565b610802576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f99061342f565b60405180910390fd5b61080d83838361142b565b505050565b6060600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632ea0430061086361085e856110c9565b611692565b6040518263ffffffff1660e01b815260040161087f919061344f565b60006040518083038186803b15801561089757600080fd5b505afa1580156108ab573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108d49190612b41565b9050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61094283838360405180602001604052806000815250610e2f565b505050565b60606000600167ffffffffffffffff81111561096657610965613aa7565b5b6040519080825280602002602001820160405280156109945781602001602082028036833780820191505090505b50905082816000815181106109ac576109ab613a78565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cbf8b66c826040518263ffffffff1660e01b8152600401610a4191906131b5565b60006040518083038186803b158015610a5957600080fd5b505afa158015610a6d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a969190612a9e565b600081518110610aa957610aa8613a78565b5b6020026020010151915050919050565b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610b48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3f9061336f565b60405180910390fd5b6001600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600b6000815480929190610bb59061394d565b91905055905033600a600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610c173382611a98565b91505090565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610cc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbd906133ef565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d379061334f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610d9690613868565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc290613868565b8015610e0f5780601f10610de457610100808354040283529160200191610e0f565b820191906000526020600020905b815481529060010190602001808311610df257829003601f168201915b5050505050905090565b610e2b610e246112d5565b8383611ccd565b5050565b610e40610e3a6112d5565b83611396565b610e7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e769061342f565b60405180910390fd5b610e8b84848484611e3a565b50505050565b6060610e9c82611e96565b610edb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed29061338f565b60405180910390fd5b6000610ee683611f02565b9050600081604051602001610efb91906130e7565b60405160208183030381529060405290506000610f4a600a600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610947565b9050600080825114610f5c5781610faf565b610fae600a600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612063565b5b905060008482604051602001610fc6929190613109565b6040516020818303038152906040529050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166387db11bd8583600860008c81526020019081526020016000206040518463ffffffff1660e01b81526004016110489392919061324a565b60006040518083038186803b15801561106057600080fd5b505afa158015611074573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061109d9190612b41565b95505050505050919050565b60096020528060005260406000206000915054906101000a900460ff1681565b6000816040516020016110dc91906130cc565b6040516020818303038152906040528051906020012060001c9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60086020528060005260406000206000915090508060000160009054906101000a900465ffffffffffff16908060000160069054906101000a900465ffffffffffff169080600001600c9054906101000a900465ffffffffffff16908060000160129054906101000a900465ffffffffffff16908060000160189054906101000a900465ffffffffffff16905085565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61129381611e96565b6112d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c9906133ef565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661135083610c1d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806113a283610c1d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806113e457506113e381856110fc565b5b8061142257508373ffffffffffffffffffffffffffffffffffffffff1661140a84610621565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661144b82610c1d565b73ffffffffffffffffffffffffffffffffffffffff16146114a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611498906132cf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611511576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115089061330f565b60405180910390fd5b61151c838383612090565b6115276000826112dd565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461157791906136e8565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115ce9190613607565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461168d838383612095565b505050565b61169a61266a565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634531c0a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561170457600080fd5b505afa158015611718573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173c9190612bb7565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eba818066040518163ffffffff1660e01b815260040160206040518083038186803b1580156117a857600080fd5b505afa1580156117bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e09190612bb7565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634daebac26040518163ffffffff1660e01b815260040160206040518083038186803b15801561184c57600080fd5b505afa158015611860573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118849190612bb7565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cc2aa0916040518163ffffffff1660e01b815260040160206040518083038186803b1580156118f057600080fd5b505afa158015611904573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119289190612bb7565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634479cef26040518163ffffffff1660e01b815260040160206040518083038186803b15801561199457600080fd5b505afa1580156119a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cc9190612bb7565b90506040518060a00160405280868965ffffffffffff166119ed91906139ba565b65ffffffffffff1681526020018560308a901c65ffffffffffff16611a1291906139ba565b65ffffffffffff1681526020018460608a901c65ffffffffffff16611a3791906139ba565b65ffffffffffff1681526020018360908a901c65ffffffffffff16611a5c91906139ba565b65ffffffffffff1681526020018260c08a901c65ffffffffffff16611a8191906139ba565b65ffffffffffff1681525095505050505050919050565b600080611aac611aa7856110c9565b611692565b6008600085815260200190815260200160002060008201518160000160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060208201518160000160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160126101000a81548165ffffffffffff021916908365ffffffffffff16021790555060808201518160000160186101000a81548165ffffffffffff021916908365ffffffffffff16021790555090506040518060a00160405290816000820160009054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681526020016000820160069054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160008201600c9054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681526020016000820160129054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681526020016000820160189054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815250509050611c8b848461209a565b827f1106ee9d020bfbb5ee34cf5535a5fbf024a011bd130078088cbf124ab309247882604051611cbb919061344f565b60405180910390a28291505092915050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611d3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d339061332f565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611e2d91906131d7565b60405180910390a3505050565b611e4584848461142b565b611e5184848484612274565b611e90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e87906132af565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60606000821415611f4a576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061205e565b600082905060005b60008214611f7c578080611f659061394d565b915050600a82611f75919061365d565b9150611f52565b60008167ffffffffffffffff811115611f9857611f97613aa7565b5b6040519080825280601f01601f191660200182016040528015611fca5781602001600182028036833780820191505090505b5090505b6000851461205757600182611fe391906136e8565b9150600a85611ff291906139ba565b6030611ffe9190613607565b60f81b81838151811061201457612013613a78565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612050919061365d565b9450611fce565b8093505050505b919050565b60606120898273ffffffffffffffffffffffffffffffffffffffff16601460ff1661240b565b9050919050565b505050565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561210a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612101906133cf565b60405180910390fd5b61211381611e96565b15612153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214a906132ef565b60405180910390fd5b61215f60008383612090565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121af9190613607565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461227060008383612095565b5050565b60006122958473ffffffffffffffffffffffffffffffffffffffff16612647565b156123fe578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026122be6112d5565b8786866040518563ffffffff1660e01b81526004016122e09493929190613169565b602060405180830381600087803b1580156122fa57600080fd5b505af192505050801561232b57506040513d601f19601f820116820180604052508101906123289190612b14565b60015b6123ae573d806000811461235b576040519150601f19603f3d011682016040523d82523d6000602084013e612360565b606091505b506000815114156123a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239d906132af565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612403565b600190505b949350505050565b60606000600283600261241e919061368e565b6124289190613607565b67ffffffffffffffff81111561244157612440613aa7565b5b6040519080825280601f01601f1916602001820160405280156124735781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106124ab576124aa613a78565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061250f5761250e613a78565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261254f919061368e565b6125599190613607565b90505b60018111156125f9577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061259b5761259a613a78565b5b1a60f81b8282815181106125b2576125b1613a78565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806125f29061383e565b905061255c565b506000841461263d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126349061328f565b60405180910390fd5b8091505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6040518060a00160405280600065ffffffffffff168152602001600065ffffffffffff168152602001600065ffffffffffff168152602001600065ffffffffffff168152602001600065ffffffffffff1681525090565b60006126d46126cf846134fd565b6134d8565b905080838252602082019050828560208602820111156126f7576126f6613adb565b5b60005b8581101561274557815167ffffffffffffffff81111561271d5761271c613ad6565b5b80860161272a8982612883565b855260208501945060208401935050506001810190506126fa565b5050509392505050565b600061276261275d84613529565b6134d8565b90508281526020810184848401111561277e5761277d613ae0565b5b6127898482856137fc565b509392505050565b60006127a461279f8461355a565b6134d8565b9050828152602081018484840111156127c0576127bf613ae0565b5b6127cb84828561380b565b509392505050565b6000813590506127e281613f5d565b92915050565b600082601f8301126127fd576127fc613ad6565b5b815161280d8482602086016126c1565b91505092915050565b60008135905061282581613f74565b92915050565b60008135905061283a81613f8b565b92915050565b60008151905061284f81613f8b565b92915050565b600082601f83011261286a57612869613ad6565b5b813561287a84826020860161274f565b91505092915050565b600082601f83011261289857612897613ad6565b5b81516128a8848260208601612791565b91505092915050565b6000813590506128c081613fa2565b92915050565b6000815190506128d581613fa2565b92915050565b6000602082840312156128f1576128f0613aea565b5b60006128ff848285016127d3565b91505092915050565b6000806040838503121561291f5761291e613aea565b5b600061292d858286016127d3565b925050602061293e858286016127d3565b9150509250929050565b60008060006060848603121561296157612960613aea565b5b600061296f868287016127d3565b9350506020612980868287016127d3565b9250506040612991868287016128b1565b9150509250925092565b600080600080608085870312156129b5576129b4613aea565b5b60006129c3878288016127d3565b94505060206129d4878288016127d3565b93505060406129e5878288016128b1565b925050606085013567ffffffffffffffff811115612a0657612a05613ae5565b5b612a1287828801612855565b91505092959194509250565b60008060408385031215612a3557612a34613aea565b5b6000612a43858286016127d3565b9250506020612a5485828601612816565b9150509250929050565b60008060408385031215612a7557612a74613aea565b5b6000612a83858286016127d3565b9250506020612a94858286016128b1565b9150509250929050565b600060208284031215612ab457612ab3613aea565b5b600082015167ffffffffffffffff811115612ad257612ad1613ae5565b5b612ade848285016127e8565b91505092915050565b600060208284031215612afd57612afc613aea565b5b6000612b0b8482850161282b565b91505092915050565b600060208284031215612b2a57612b29613aea565b5b6000612b3884828501612840565b91505092915050565b600060208284031215612b5757612b56613aea565b5b600082015167ffffffffffffffff811115612b7557612b74613ae5565b5b612b8184828501612883565b91505092915050565b600060208284031215612ba057612b9f613aea565b5b6000612bae848285016128b1565b91505092915050565b600060208284031215612bcd57612bcc613aea565b5b6000612bdb848285016128c6565b91505092915050565b6000612bf08383612bfc565b60208301905092915050565b612c058161372e565b82525050565b612c148161372e565b82525050565b612c2b612c268261372e565b613996565b82525050565b6000612c3c8261359b565b612c4681856135c9565b9350612c518361358b565b8060005b83811015612c82578151612c698882612be4565b9750612c74836135bc565b925050600181019050612c55565b5085935050505092915050565b612c9881613740565b82525050565b6000612ca9826135a6565b612cb381856135da565b9350612cc381856020860161380b565b612ccc81613aef565b840191505092915050565b612ce0816137b4565b82525050565b612cef816137d8565b82525050565b6000612d00826135b1565b612d0a81856135eb565b9350612d1a81856020860161380b565b612d2381613aef565b840191505092915050565b6000612d39826135b1565b612d4381856135fc565b9350612d5381856020860161380b565b80840191505092915050565b6000612d6c6020836135eb565b9150612d7782613b4e565b602082019050919050565b6000612d8f6032836135eb565b9150612d9a82613b77565b604082019050919050565b6000612db26025836135eb565b9150612dbd82613bc6565b604082019050919050565b6000612dd5601c836135eb565b9150612de082613c15565b602082019050919050565b6000612df86024836135eb565b9150612e0382613c3e565b604082019050919050565b6000612e1b6019836135eb565b9150612e2682613c8d565b602082019050919050565b6000612e3e6029836135eb565b9150612e4982613cb6565b604082019050919050565b6000612e616014836135eb565b9150612e6c82613d05565b602082019050919050565b6000612e84602b836135eb565b9150612e8f82613d2e565b604082019050919050565b6000612ea7603e836135eb565b9150612eb282613d7d565b604082019050919050565b6000612eca6020836135eb565b9150612ed582613dcc565b602082019050919050565b6000612eed600f836135fc565b9150612ef882613df5565b600f82019050919050565b6000612f106018836135eb565b9150612f1b82613e1e565b602082019050919050565b6000612f336021836135eb565b9150612f3e82613e47565b604082019050919050565b6000612f566015836135fc565b9150612f6182613e96565b601582019050919050565b6000612f79602e836135eb565b9150612f8482613ebf565b604082019050919050565b6000612f9c6028836135fc565b9150612fa782613f0e565b602882019050919050565b60a082016000820151612fc860008501826130ae565b506020820151612fdb60208501826130ae565b506040820151612fee60408501826130ae565b50606082015161300160608501826130ae565b50608082015161301460808501826130ae565b50505050565b60a08201600080830154905061302f8161389a565b61303c60008601826130ae565b5061304681613902565b61305360208601826130ae565b5061305d816138b4565b61306a60408601826130ae565b50613074816138ce565b61308160608601826130ae565b5061308b816138e8565b61309860808601826130ae565b5050505050565b6130a881613798565b82525050565b6130b7816137a2565b82525050565b6130c6816137a2565b82525050565b60006130d88284612c1a565b60148201915081905092915050565b60006130f282612ee0565b91506130fe8284612d2e565b915081905092915050565b600061311482612ee0565b91506131208285612d2e565b915061312b82612f49565b91506131378284612d2e565b915061314282612f8f565b91508190509392505050565b60006020820190506131636000830184612c0b565b92915050565b600060808201905061317e6000830187612c0b565b61318b6020830186612c0b565b613198604083018561309f565b81810360608301526131aa8184612c9e565b905095945050505050565b600060208201905081810360008301526131cf8184612c31565b905092915050565b60006020820190506131ec6000830184612c8f565b92915050565b60006020820190506132076000830184612cd7565b92915050565b60006020820190506132226000830184612ce6565b92915050565b600060208201905081810360008301526132428184612cf5565b905092915050565b600060e08201905081810360008301526132648186612cf5565b905081810360208301526132788185612cf5565b9050613287604083018461301a565b949350505050565b600060208201905081810360008301526132a881612d5f565b9050919050565b600060208201905081810360008301526132c881612d82565b9050919050565b600060208201905081810360008301526132e881612da5565b9050919050565b6000602082019050818103600083015261330881612dc8565b9050919050565b6000602082019050818103600083015261332881612deb565b9050919050565b6000602082019050818103600083015261334881612e0e565b9050919050565b6000602082019050818103600083015261336881612e31565b9050919050565b6000602082019050818103600083015261338881612e54565b9050919050565b600060208201905081810360008301526133a881612e77565b9050919050565b600060208201905081810360008301526133c881612e9a565b9050919050565b600060208201905081810360008301526133e881612ebd565b9050919050565b6000602082019050818103600083015261340881612f03565b9050919050565b6000602082019050818103600083015261342881612f26565b9050919050565b6000602082019050818103600083015261344881612f6c565b9050919050565b600060a0820190506134646000830184612fb2565b92915050565b600060208201905061347f600083018461309f565b92915050565b600060a08201905061349a60008301886130bd565b6134a760208301876130bd565b6134b460408301866130bd565b6134c160608301856130bd565b6134ce60808301846130bd565b9695505050505050565b60006134e26134f3565b90506134ee828261391c565b919050565b6000604051905090565b600067ffffffffffffffff82111561351857613517613aa7565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561354457613543613aa7565b5b61354d82613aef565b9050602081019050919050565b600067ffffffffffffffff82111561357557613574613aa7565b5b61357e82613aef565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061361282613798565b915061361d83613798565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613652576136516139eb565b5b828201905092915050565b600061366882613798565b915061367383613798565b92508261368357613682613a1a565b5b828204905092915050565b600061369982613798565b91506136a483613798565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156136dd576136dc6139eb565b5b828202905092915050565b60006136f382613798565b91506136fe83613798565b925082821015613711576137106139eb565b5b828203905092915050565b600065ffffffffffff82169050919050565b600061373982613778565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600065ffffffffffff82169050919050565b60006137bf826137c6565b9050919050565b60006137d182613778565b9050919050565b60006137e3826137ea565b9050919050565b60006137f582613778565b9050919050565b82818337600083830152505050565b60005b8381101561382957808201518184015260208101905061380e565b83811115613838576000848401525b50505050565b600061384982613798565b9150600082141561385d5761385c6139eb565b5b600182039050919050565b6000600282049050600182168061388057607f821691505b6020821081141561389457613893613a49565b5b50919050565b60006138ad6138a883613b0d565b61371c565b9050919050565b60006138c76138c283613b41565b61371c565b9050919050565b60006138e16138dc83613b1a565b61371c565b9050919050565b60006138fb6138f683613b27565b61371c565b9050919050565b600061391561391083613b34565b61371c565b9050919050565b61392582613aef565b810181811067ffffffffffffffff8211171561394457613943613aa7565b5b80604052505050565b600061395882613798565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561398b5761398a6139eb565b5b600182019050919050565b60006139a1826139a8565b9050919050565b60006139b382613b00565b9050919050565b60006139c582613798565b91506139d083613798565b9250826139e0576139df613a1a565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b60008160001c9050919050565b60008160901c9050919050565b60008160c01c9050919050565b60008160301c9050919050565b60008160601c9050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4e6f756e20616c726561647920636c61696d6564000000000000000000000000600082015250565b7f4e6f756e73546f6b656e3a2055524920717565727920666f72206e6f6e65786960008201527f7374656e7420746f6b656e000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f53796e746865746963204e6f756e200000000000000000000000000000000000600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f20636c61696d656420627920616464726573732c200000000000000000000000600082015250565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b7f2c2069732061206d656d626572206f66207468652053796e746865746963204e60008201527f6f756e732044414f000000000000000000000000000000000000000000000000602082015250565b613f668161372e565b8114613f7157600080fd5b50565b613f7d81613740565b8114613f8857600080fd5b50565b613f948161374c565b8114613f9f57600080fd5b50565b613fab81613798565b8114613fb657600080fd5b5056fea2646970667358221220e66bae4e5271e488a525229ce18806f69cecc1ddaac71cee04b94a6fa09230a264736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "claim()": {
        "details": "Call _mintTo with the to address."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_reverseName(address)": {
        "notice": "Mint a Noun with `nounId` to the provided `to` address."
      },
      "addressPreview(address)": {
        "notice": "Given an address, construct a base64 encoded SVG image."
      },
      "claim()": {
        "notice": "Mint a Noun to the minter."
      },
      "getSeedInput(address)": {
        "notice": "Given an address, generate a unique input to be used with the generateSeed function."
      },
      "tokenURI(uint256)": {
        "notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/SyntheticNouns.sol:SyntheticNouns",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/SyntheticNouns.sol:SyntheticNouns",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/SyntheticNouns.sol:SyntheticNouns",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/SyntheticNouns.sol:SyntheticNouns",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/SyntheticNouns.sol:SyntheticNouns",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/SyntheticNouns.sol:SyntheticNouns",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1636,
        "contract": "contracts/SyntheticNouns.sol:SyntheticNouns",
        "label": "descriptor",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(INounsDescriptor)2240"
      },
      {
        "astId": 1639,
        "contract": "contracts/SyntheticNouns.sol:SyntheticNouns",
        "label": "reverseRecords",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IENSReverseRecords)2020"
      },
      {
        "astId": 1644,
        "contract": "contracts/SyntheticNouns.sol:SyntheticNouns",
        "label": "seeds",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Seed)2255_storage)"
      },
      {
        "astId": 1648,
        "contract": "contracts/SyntheticNouns.sol:SyntheticNouns",
        "label": "claimed",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1652,
        "contract": "contracts/SyntheticNouns.sol:SyntheticNouns",
        "label": "claimerOf",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1655,
        "contract": "contracts/SyntheticNouns.sol:SyntheticNouns",
        "label": "_currentNounId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IENSReverseRecords)2020": {
        "encoding": "inplace",
        "label": "contract IENSReverseRecords",
        "numberOfBytes": "20"
      },
      "t_contract(INounsDescriptor)2240": {
        "encoding": "inplace",
        "label": "contract INounsDescriptor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Seed)2255_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct INounsSeeder.Seed)",
        "numberOfBytes": "32",
        "value": "t_struct(Seed)2255_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Seed)2255_storage": {
        "encoding": "inplace",
        "label": "struct INounsSeeder.Seed",
        "members": [
          {
            "astId": 2246,
            "contract": "contracts/SyntheticNouns.sol:SyntheticNouns",
            "label": "background",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 2248,
            "contract": "contracts/SyntheticNouns.sol:SyntheticNouns",
            "label": "body",
            "offset": 6,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 2250,
            "contract": "contracts/SyntheticNouns.sol:SyntheticNouns",
            "label": "accessory",
            "offset": 12,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 2252,
            "contract": "contracts/SyntheticNouns.sol:SyntheticNouns",
            "label": "head",
            "offset": 18,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 2254,
            "contract": "contracts/SyntheticNouns.sol:SyntheticNouns",
            "label": "glasses",
            "offset": 24,
            "slot": "0",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}